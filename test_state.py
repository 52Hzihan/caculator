import unittest
from state import State

class TestState(unittest.TestCase):
    def test_inputNumber(self):
        s = State()
        self.assertEqual(s.pointerIndex, -1)
        s.inputNumber('1')
        self.assertEqual(s.eleList, ['1'])
        self.assertEqual(s.pointerIndex, 0)
        s.inputNumber('3')
        self.assertEqual(s.eleList, ['1', '3'])
        self.assertEqual(s.pointerIndex, 1)

    def test_inputDot(self):
        s = State()
        self.assertEqual(s.pointerIndex, -1)
        s.inputDot()
        self.assertEqual(s.eleList, ['0', '.'])
        self.assertEqual(s.pointerIndex, 1)
        s.allClear()
        s.inputNumber('6')
        s.inputDot()
        self.assertEqual(s.eleList, ['6', '.'])
        self.assertEqual(s.pointerIndex, 1)

    def test_inputOperator(self):
        s = State()
        s.inputNumber('1')
        s.inputOperator('*')
        self.assertEqual(s.eleList, ['1', '*'])
        self.assertEqual(s.pointerIndex, 1)

    def test_inputFunction(self):
        s = State()
        s.inputNumber('1')
        s.inputNumber('3')
        s.inputOperator('*')
        s.inputFunction('sin')
        self.assertEqual(s.eleList, ['1', '3', '*', 'sin', '(', ')'])
        self.assertEqual(s.pointerIndex, 4)

    def test_inputBrackets(self):
        s = State()
        s.inputNumber('1')
        s.inputNumber('3')
        s.inputBrackets()
        self.assertEqual(s.eleList, ['1', '3', '*', '(', ')'])
        self.assertEqual(s.pointerIndex, 3)
        s.inputNumber('5')
        self.assertEqual(s.eleList, ['1', '3', '*', '(', '5', ')'])
        self.assertEqual(s.pointerIndex, 4)

    def test_inputLastAnswer(self):
        s = State()
        s.inputLastAnswer()
        self.assertEqual(s.eleList, [])
        s.lastAnswer = '235'
        s.inputLastAnswer()
        self.assertEqual(s.eleList, ['ans'])
        self.assertEqual(s.pointerIndex, 0)

    def test_backspace(self):
        s = State()
        s.backspace()
        self.assertEqual(s.eleList, [])
        self.assertEqual(s.pointerIndex, -1)
        s.inputNumber('3')
        s.inputDot()
        s.inputNumber('8')
        self.assertEqual(s.eleList, ['3', '.', '8'])
        self.assertEqual(s.pointerIndex, 2)
        s.backspace()
        self.assertEqual(s.eleList, ['3', '.'])
        self.assertEqual(s.pointerIndex, 1)
        s.backspace()
        self.assertEqual(s.eleList, ['3'])
        self.assertEqual(s.pointerIndex, 0)
        s.backspace()
        self.assertEqual(s.eleList, [])
        self.assertEqual(s.pointerIndex, -1)
        s.inputFunction('sin')
        self.assertEqual(s.eleList, ['sin', '(', ')'])
        self.assertEqual(s.pointerIndex, 1)
        s.backspace()
        self.assertEqual(s.eleList, ['sin'])
        self.assertEqual(s.pointerIndex, 0)
        s.inputBrackets()
        s.inputNumber('3')
        s.movePointer('+')
        s.backspace()
        self.assertEqual(s.eleList, ['sin'])
        self.assertEqual(s.pointerIndex, 0)
        s.backspace()
        s.backspace()
        s.backspace()
        self.assertEqual(s.eleList, [])
        self.assertEqual(s.pointerIndex, -1)
        s.inputNumber('3')
        s.inputFunction('sin')
        self.assertEqual(s.eleList, ['3', '*', 'sin', '(', ')'])
        self.assertEqual(s.pointerIndex, 3)

    def test_allClear(self):
        s = State()
        s.inputNumber('6')
        self.assertEqual(s.eleList, ['6'])
        self.assertEqual(s.pointerIndex, 0)
        s.allClear()
        self.assertEqual(s.eleList, [])
        self.assertEqual(s.pointerIndex, -1)

    def test_movePointer(self):
        s = State()
        s.movePointer('+')
        self.assertEqual(s.pointerIndex, -1)
        s.movePointer('-')
        self.assertEqual(s.pointerIndex, -1)
        s.inputFunction('cos')
        self.assertEqual(s.eleList, ['cos', '(', ')'])
        self.assertEqual(s.pointerIndex, 1)
        s.movePointer('+')
        self.assertEqual(s.pointerIndex, 2)
        s.movePointer('+')
        self.assertEqual(s.pointerIndex, 2)
        s.movePointer('-')
        self.assertEqual(s.pointerIndex, 1)
        s.movePointer('-')
        s.movePointer('-')
        self.assertEqual(s.pointerIndex, -1)
        s.movePointer('-')
        self.assertEqual(s.pointerIndex, -1)

    def test_resetWithAns(self):
        s = State()
        s.inputNumber('4')
        s.resetWithAns('4')
        self.assertEqual(s.eleList, [])
        self.assertEqual(s.pointerIndex, -1)
        self.assertEqual(s.lastAnswer, '4')

if __name__ == '__main__':
    unittest.main()
