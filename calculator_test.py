import unittest
from calculator import Calculator

class TestCalculator(unittest.TestCase):
    def test_inputNumber(self):
        c = Calculator()
        self.assertEqual(c.pointerIndex, -1)
        c.inputNumber('1')
        self.assertEqual(c.eleList, ['1'])
        self.assertEqual(c.pointerIndex, 0)
        c.inputNumber('3')
        self.assertEqual(c.eleList, ['13'])
        c.inputDot()
        self.assertEqual(c.eleList, ['13.'])
        c.inputNumber('9')
        self.assertEqual(c.eleList, ['13.9'])
        self.assertEqual(c.pointerIndex, 0)

        c.movePointer('backward')
        c.inputNumber('6')
        self.assertEqual(c.eleList, ['613.9'])
        self.assertEqual(c.pointerIndex, 0)

    def test_inputDot(self):
        c = Calculator()
        self.assertEqual(c.pointerIndex, -1)
        c.inputDot()
        self.assertEqual(c.eleList, [])
        self.assertEqual(c.pointerIndex, -1)
        c.inputNumber('6')
        c.inputDot()
        self.assertEqual(c.eleList, ['6.'])
        self.assertEqual(c.pointerIndex, 0)

    def test_inputOperator(self):
        c = Calculator()
        c.inputNumber('1')
        c.inputNumber('3')
        c.inputOperator('*')
        self.assertEqual(c.eleList, ['13', '*'])
        self.assertEqual(c.pointerIndex, 1)

    def test_inputFunction(self):
        c = Calculator()
        c.inputNumber('1')
        c.inputNumber('3')
        c.inputOperator('*')
        c.inputFunction('sin')
        self.assertEqual(c.eleList, ['13', '*', 'sin', '(', ')'])
        self.assertEqual(c.pointerIndex, 3)

    def test_inputBrackets(self):
        c = Calculator()
        c.inputNumber('1')
        c.inputNumber('3')
        c.inputOperator('*')
        c.inputBrackets()
        self.assertEqual(c.eleList, ['13', '*', '(', ')'])
        self.assertEqual(c.pointerIndex, 2)
        c.inputNumber('5')
        self.assertEqual(c.eleList, ['13', '*', '(', '5', ')'])
        self.assertEqual(c.pointerIndex, 3)

    def test_inputLastAnswer(self):
        c = Calculator()
        c.inputLastAnswer()
        self.assertEqual(c.eleList, [])
        c.lastAnswer = '235'
        c.inputLastAnswer()
        self.assertEqual(c.eleList, ['ans'])
        self.assertEqual(c.pointerIndex, 0)

    def test_backspace(self):
        c = Calculator()
        c.backspace()
        self.assertEqual(c.eleList, [])
        self.assertEqual(c.pointerIndex, -1)
        c.inputNumber('3')
        c.inputDot()
        c.inputNumber('8')
        self.assertEqual(c.eleList, ['3.8'])
        self.assertEqual(c.pointerIndex, 0)
        c.backspace()
        self.assertEqual(c.eleList, ['3.'])
        self.assertEqual(c.pointerIndex, 0)
        c.backspace()
        self.assertEqual(c.eleList, ['3'])
        self.assertEqual(c.pointerIndex, 0)
        c.backspace()
        self.assertEqual(c.eleList, [])
        self.assertEqual(c.pointerIndex, -1)
        c.inputFunction('sin')
        self.assertEqual(c.eleList, ['sin', '(', ')'])
        c.backspace()
        self.assertEqual(c.eleList, ['sin'])
        self.assertEqual(c.pointerIndex, 0)
        c.inputBrackets()
        c.inputNumber('3')
        c.movePointer('forward')
        c.backspace()
        self.assertEqual(c.eleList, ['sin', '(', '3'])
        self.assertEqual(c.pointerIndex, 2)
        c.backspace()
        c.backspace()
        c.backspace()
        self.assertEqual(c.eleList, [])
        self.assertEqual(c.pointerIndex, -1)

    def test_allClear(self):
        c = Calculator()
        c.inputNumber('6')
        self.assertEqual(c.eleList, ['6'])
        self.assertEqual(c.pointerIndex, 0)
        c.allClear()
        self.assertEqual(c.eleList, [])
        self.assertEqual(c.pointerIndex, -1)

    def test_movePointer(self):
        c = Calculator()
        c.movePointer('forward')
        self.assertEqual(c.pointerIndex, -1)
        c.movePointer('backward')
        self.assertEqual(c.pointerIndex, -1)
        c.inputFunction('cos')
        self.assertEqual(c.eleList, ['cos', '(', ')'])
        self.assertEqual(c.pointerIndex, 1)
        c.movePointer('forward')
        self.assertEqual(c.pointerIndex, 2)
        c.movePointer('forward')
        self.assertEqual(c.pointerIndex, 2)
        c.movePointer('backward')
        self.assertEqual(c.pointerIndex, 1)
        c.movePointer('backward')
        c.movePointer('backward')
        self.assertEqual(c.pointerIndex, -1)
        c.movePointer('backward')
        self.assertEqual(c.pointerIndex, -1)

if __name__ == '__main__':
    unittest.main()
